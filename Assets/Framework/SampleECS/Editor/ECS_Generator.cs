using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using System.Reflection;

namespace SampleECS
{

	public static class EcsEditorTool
	{
		static string editorPath = "";
		public static string GetEditorPath 
		{
			get
			{
				if (string.IsNullOrEmpty(editorPath))
				{
					var path = Directory.GetDirectories(Application.dataPath, "*", SearchOption.AllDirectories);
					foreach (var p in path)
					{
						if (p.EndsWith("SampleECS"))
						{
							editorPath = p;
							break;
						}
					}
				}
				return editorPath;
			}
		}
	}

	public class ECS_Generator
	{
		[MenuItem("公共框架/Sample ECS/全部生成")]
		public static void BuildCodes()
		{
			string gen_path = EcsEditorTool.GetEditorPath + "/GenCodes/";
			if (!Directory.Exists(gen_path))
				Directory.CreateDirectory(gen_path);


			var asm_all_types = Assembly.GetAssembly(typeof(ECS_Context)).GetTypes();
			Gen_Context_Code(gen_path + "ECS_Context_Wrap.cs", asm_all_types);
			Gen_Entity_Code(gen_path + "ECS_Entity_Wrap.cs", asm_all_types);

			AssetDatabase.Refresh();
		}

		static void Gen_Context_Code(string file_path, System.Type[] asm_all_types)
		{
			StringBuilder entity_sctipt = new StringBuilder();
			entity_sctipt.AppendLine("/*");
			entity_sctipt.AppendLine("\tAuto Generated By SampleECS,Don't Modify It Manually!");
			entity_sctipt.AppendLine("*/");
			entity_sctipt.AppendLine("namespace SampleECS");
			entity_sctipt.AppendLine("{");
			entity_sctipt.AppendLine("\tpublic partial class ECS_Context");
			entity_sctipt.AppendLine("\t{");

			foreach (var type in asm_all_types)
			{
				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null)
				{
					entity_sctipt.AppendLine(string.Format("\t\tpublic ECS_Component_Pool<{0}> pool_{1};", type, type));
				}
			}

			entity_sctipt.AppendLine("\t\tpublic void InitComPool(int context_id)");
			entity_sctipt.AppendLine("\t\t{");
			foreach (var type in asm_all_types)
			{
				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null)
				{
					entity_sctipt.AppendLine("\t\t\tcomponent_pool_container_ptr++;");
					entity_sctipt.AppendLine(string.Format("\t\t\tpool_{0} = ECS_Component_Pool<{1}>.GetPool(context_id,typeof({2}));", type, type, type));
					entity_sctipt.AppendLine("\t\t\tECS_Utils.SetArrayElement(ref component_pool_container,component_pool_container_ptr," + string.Format("pool_{0}", type) + ");");
					entity_sctipt.AppendLine("");
				}
			}
			entity_sctipt.AppendLine("\t\t}");

			entity_sctipt.AppendLine("\t}");
			entity_sctipt.AppendLine("}");

			using (var e_file = File.CreateText(file_path))
			{
				e_file.Write(entity_sctipt.ToString());
				e_file.Flush();
			}
		}

		static void Gen_Entity_Code(string file_path, System.Type[] asm_all_types)
		{

			StringBuilder entity_sctipt = new StringBuilder();
			entity_sctipt.AppendLine("/*");
			entity_sctipt.AppendLine("\tAuto Generated By SampleECS,Don't Modify It Manually!");
			entity_sctipt.AppendLine("*/");
			entity_sctipt.AppendLine("namespace SampleECS");
			entity_sctipt.AppendLine("{");
			entity_sctipt.AppendLine("\tpublic partial class ECS_Entity");
			entity_sctipt.AppendLine("\t{");

			entity_sctipt.AppendLine("\t\tconst int INVAILD_IDX = -1;");
			//反射收集全部Component类型
			foreach (var type in asm_all_types)
			{
				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null)
				{
					entity_sctipt.AppendLine("\t\t/* Component Code : " + type + " */");
					string com_field = type.ToString().ToLower();
					string pool = "context.pool_" + type;
					string pid = "_" + type + "_pid";
					//Conponent idx
					entity_sctipt.AppendLine("\t\tint " + pid + " = -1;");
					//Component引用
					entity_sctipt.AppendLine("\t\tpublic " + type + " " + com_field + "{ get { return " + pool + ".use_coms[" + pid + "].user_struct; } }");
					//Has Component
					entity_sctipt.AppendLine("\t\tpublic bool has_" + type + " { get { return " + pid + " != INVAILD_IDX; } }");
					//Add Component
					entity_sctipt.AppendLine(string.Format("\t\tpublic void Add_{0}({1} com)", type, type) +
						" { if(" + pid + " == INVAILD_IDX) {" + pid + " = " + pool + ".NewComponent(com); " +
						"context.OnEntityChange(this); } }");
					//Remove Component
					//entity_sctipt.AppendLine(string.Format("\t\tpublic void Remove_{0}()", type) + "{" + "has_" + type + " = false; }");
					//isDirty
					entity_sctipt.AppendLine("\t\tpublic bool is_" + type + "_dirty{ get { if(" + pid + " == INVAILD_IDX) return false; return " + pool + ".use_coms[" + pid + "]._dirty; } }");
					//Replace Component
					entity_sctipt.AppendLine(string.Format("\t\tpublic void Replace_{0}({1} com)", type, type) +
						" { " + pool + ".SetDirty(" + pid + ", com); }");
					entity_sctipt.AppendLine("");
				}
			}
			entity_sctipt.AppendLine("\t}");
			entity_sctipt.AppendLine("}");

			using (var e_file = File.CreateText(file_path))
			{
				e_file.Write(entity_sctipt.ToString());
				e_file.Flush();
			}
		}

		[MenuItem("公共框架/Sample ECS/全部清理")]
		public static void CleanCodes()
		{
			string gen_path = EcsEditorTool.GetEditorPath + "/GenCodes";
			if (Directory.Exists(gen_path))
				Directory.Delete(gen_path, true);

			AssetDatabase.Refresh();
		}
	}
}