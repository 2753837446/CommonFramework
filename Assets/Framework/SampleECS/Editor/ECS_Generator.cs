using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using System.Reflection;

namespace SampleECS
{

	public static class EcsEditorTool
	{
		static string editorPath = "";
		public static string GetEditorPath 
		{
			get
			{
				if (string.IsNullOrEmpty(editorPath))
				{
					var path = Directory.GetDirectories(Application.dataPath, "*", SearchOption.AllDirectories);
					foreach (var p in path)
					{
						if (p.EndsWith("SampleECS"))
						{
							editorPath = p;
							break;
						}
					}
				}
				return editorPath;
			}
		}
	}

	public class ECS_Generator
	{
		[MenuItem("公共框架/Sample ECS/全部生成")]
		public static void BuildCodes()
		{
			string gen_path = EcsEditorTool.GetEditorPath + "/GenCodes/";
			if (!Directory.Exists(gen_path))
				Directory.CreateDirectory(gen_path);


			var asm_all_types = Assembly.GetAssembly(typeof(ECS_Context)).GetTypes();
			Gen_Context_Wrap(gen_path + "ECS_Context_Wrap.cs", asm_all_types);
			Gen_Component_Wrap(gen_path + "ECS_Component_Wrap.cs", asm_all_types);
			Gen_Entity_Wrap(gen_path + "ECS_Entity_Wrap.cs", asm_all_types);

			AssetDatabase.Refresh();
		}

		static void Gen_Context_Wrap(string file_path, System.Type[] asm_all_types)
		{
			StringBuilder entity_sctipt = new StringBuilder();
			entity_sctipt.AppendLine("/*");
			entity_sctipt.AppendLine("\tAuto Generated By SampleECS,Don't Modify It Manually!");
			entity_sctipt.AppendLine("*/");
			entity_sctipt.AppendLine("namespace SampleECS");
			entity_sctipt.AppendLine("{");
			entity_sctipt.AppendLine("\tpublic partial class ECS_Context");
			entity_sctipt.AppendLine("\t{");

			foreach (var type in asm_all_types)
			{
				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null)
				{
					entity_sctipt.AppendLine(string.Format("\t\tpublic ECS_Component_Pool<{0}> pool_{1};", type, type));
				}
			}

			entity_sctipt.AppendLine("\t\tpublic void InitComPool(int context_id)");
			entity_sctipt.AppendLine("\t\t{");
			foreach (var type in asm_all_types)
			{
				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null)
				{
					entity_sctipt.AppendLine("\t\t\tcomponent_pool_container_ptr++;");
					entity_sctipt.AppendLine(string.Format("\t\t\tpool_{0} = ECS_Component_Pool<{1}>.GetPool(context_id,typeof({2}));", type, type, type));
					entity_sctipt.AppendLine("\t\t\tECS_Utils.SetArrayElement(ref component_pool_container,component_pool_container_ptr," + string.Format("pool_{0}", type) + ");");
					entity_sctipt.AppendLine("");
				}
			}
			entity_sctipt.AppendLine("\t\t}");

			entity_sctipt.AppendLine("\t}");
			entity_sctipt.AppendLine("}");

			using (var e_file = File.CreateText(file_path))
			{
				e_file.Write(entity_sctipt.ToString());
				e_file.Flush();
			}
		}

		static void Gen_Component_Wrap(string file_path, System.Type[] asm_all_types)
		{
			StringBuilder entity_sctipt = new StringBuilder();
			entity_sctipt.AppendLine("/*");
			entity_sctipt.AppendLine("\tAuto Generated By SampleECS,Don't Modify It Manually!");
			entity_sctipt.AppendLine("*/");
			entity_sctipt.AppendLine("using System.Collections.Generic;");
			entity_sctipt.AppendLine("namespace SampleECS");
			entity_sctipt.AppendLine("{");

			//entity_sctipt.AppendLine("\t\t}");
			entity_sctipt.AppendLine("\tpublic static partial class ECS_Component_Type");
			entity_sctipt.AppendLine("\t{");
			int com_id = 0;
			foreach (var type in asm_all_types)
			{
				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null)
				{
					entity_sctipt.AppendLine(string.Format("\t\t/* Component <{0}> ID */", type));
					entity_sctipt.AppendLine(string.Format("\t\tpublic const int {0} = {1};", type, com_id));
					com_id++;
				}
			}
			entity_sctipt.AppendLine("\t}");

			entity_sctipt.AppendLine("");

			//entity_sctipt.AppendLine("\t\tstatic Dictionary<string,int> COM_TYPE_ID_MAP = new Dictionary<string, int>();");
			entity_sctipt.AppendLine("\tpublic static partial class ECS_Component_Wrap");
			entity_sctipt.AppendLine("\t{");
			entity_sctipt.AppendLine("\t\tstatic bool inited = false;");
			entity_sctipt.AppendLine("\t\tpublic static void Init()");
			entity_sctipt.AppendLine("\t\t{");
			entity_sctipt.AppendLine("\t\t\tif(inited) return;");
			foreach (var type in asm_all_types)
			{
				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null)
				{
					entity_sctipt.AppendLine(string.Format("\t\t\tCOM_TYPE_ID_MAP.Add(\"{0}\",ECS_Component_Type.{1});", type.ToString(), type));
				}
			}

			entity_sctipt.AppendLine("\t\t\tECS_Component_Type.SetTypeCount(COM_TYPE_ID_MAP.Count);");
			entity_sctipt.AppendLine("\t\t\tinited = true;");
			entity_sctipt.AppendLine("\t\t}");

			entity_sctipt.AppendLine("\t}");
			entity_sctipt.AppendLine("}");

			using (var e_file = File.CreateText(file_path))
			{
				e_file.Write(entity_sctipt.ToString());
				e_file.Flush();
			}
		}

		static void Gen_Entity_Wrap(string file_path, System.Type[] asm_all_types)
		{

			StringBuilder entity_sctipt = new StringBuilder();
			entity_sctipt.AppendLine("/*");
			entity_sctipt.AppendLine("\tAuto Generated By SampleECS,Don't Modify It Manually!");
			entity_sctipt.AppendLine("*/");
			entity_sctipt.AppendLine("namespace SampleECS");
			entity_sctipt.AppendLine("{");
			entity_sctipt.AppendLine("\tpublic partial class ECS_Entity");
			entity_sctipt.AppendLine("\t{");

			entity_sctipt.AppendLine("\t\tconst int INVAILD_IDX = -1;");
			//反射收集全部Component类型
			foreach (var type in asm_all_types)
			{
				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null)
				{
					entity_sctipt.AppendLine("\t\t/* Component Code : " + type + " */");
					string com_field = type.ToString().ToLower();
					string pool = "context.pool_" + type;
					string pid = "poolIndecies[ECS_Component_Type." + type + "]";

					//Component引用
					entity_sctipt.AppendLine("\t\tpublic " + type + " " + com_field +
						"{ get { return " + pool + ".use_coms[" + pid + "-1].user_struct; } "
						+ "set {" + pool + ".use_coms[" + pid + "-1].user_struct = value; }"
						+ "}");

					//Has Component
					entity_sctipt.AppendLine("\t\tpublic bool has_" + type + " { get { return " + pid + "-1 != INVAILD_IDX; } }");

					//Add Component
					entity_sctipt.AppendLine(string.Format("\t\tpublic void Add_{0}({1} com)", type, type) +
						" { if(" + pid + "-1 == INVAILD_IDX) {" + pid + " = " + pool + ".NewComponent(com) +1; " +
						"context.OnEntityChange(this); } }");

					//Remove Component
					//entity_sctipt.AppendLine(string.Format("\t\tpublic void Remove_{0}()", type) + "{" + "has_" + type + " = false; }");

					//Replace Component
					entity_sctipt.AppendLine(string.Format("\t\tpublic void Replace_{0}({1} com)", type, type));
					entity_sctipt.AppendLine("\t\t{");
					entity_sctipt.AppendLine("\t\t\tif (dirtyMarkPtr < 0) { context.excute_ptr++; context.excuteEntities[context.excute_ptr] = idx; }");
					entity_sctipt.AppendLine("\t\t\t" + com_field + " = com; dirtyMarkPtr++; dirtyMark[dirtyMarkPtr] = ECS_Component_Type." + type + ";");
					entity_sctipt.AppendLine("\t\t}");
					entity_sctipt.AppendLine("");
				}
			}
			entity_sctipt.AppendLine("\t}");
			entity_sctipt.AppendLine("}");

			using (var e_file = File.CreateText(file_path))
			{
				e_file.Write(entity_sctipt.ToString());
				e_file.Flush();
			}
		}

		[MenuItem("公共框架/Sample ECS/全部清理")]
		public static void CleanCodes()
		{
			string gen_path = EcsEditorTool.GetEditorPath + "/GenCodes";
			if (Directory.Exists(gen_path))
				Directory.Delete(gen_path, true);

			AssetDatabase.Refresh();
		}
	}
}