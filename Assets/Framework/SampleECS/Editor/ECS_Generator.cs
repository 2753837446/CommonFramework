using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using System.Reflection;

namespace SampleECS
{

	public static class EcsEditorTool
	{
		static string editorPath = "";
		public static string GetEditorPath 
		{
			get
			{
				if (string.IsNullOrEmpty(editorPath))
				{
					var path = Directory.GetDirectories(Application.dataPath, "*", SearchOption.AllDirectories);
					foreach (var p in path)
					{
						if (p.EndsWith("SampleECS"))
						{
							editorPath = p;
							break;
						}
					}
				}
				return editorPath;
			}
		}
	}

	public class ECS_Generator
	{
		[MenuItem("公共框架/Sample ECS/全部生成")]
		public static void BuildCodes()
		{
			string gen_path = EcsEditorTool.GetEditorPath + "/GenCodes/";
			if (!Directory.Exists(gen_path))
				Directory.CreateDirectory(gen_path);

			var asm_all_types = Assembly.GetAssembly(typeof(ECS_Context)).GetTypes();
			//收集每个Context中定义的Components
			Dictionary<string, HashSet<System.Type>> context_component_container = new Dictionary<string, HashSet<System.Type>>();
			foreach (var type in asm_all_types)
			{
				System.ObsoleteAttribute obs = type.GetCustomAttribute<System.ObsoleteAttribute>();
				if (obs != null)
					continue;

				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null)
				{
					if (string.IsNullOrEmpty(ca.context))
					{
						Debug.LogAssertionFormat($"ECS Component(Type:{type}) Must Belong to a Sperfic Context");
						continue;
					}


					if (!context_component_container.ContainsKey(ca.context))
						context_component_container.Add(ca.context, new HashSet<System.Type>());
					context_component_container[ca.context].Add(type);
				}
			}
			foreach (var context_content in context_component_container)
			{
				string context_name = context_content.Key;
				System.Type[] component_types = new System.Type[context_content.Value.Count];
				context_content.Value.CopyTo(component_types);

				Gen_Context_Wrap(gen_path + $"ECS_{context_name}_Context_Wrap.cs", context_name, component_types);
				Gen_Component_Wrap(gen_path + $"ECS_{context_name}_Component_Wrap.cs", context_name, component_types);
				Gen_Entity_Wrap(gen_path + $"ECS_{context_name}_Entity_Wrap" + "{0}.cs", context_name, component_types);
				Gen_System_Wrap(gen_path + $"ECS_{context_name}_System_Wrap.cs", context_name);
			}

			AssetDatabase.Refresh();
		}

		//生成Context代码包
		static void Gen_Context_Wrap(string file_path, string context_name, System.Type[] asm_all_types)
		{
			StringBuilder _sctipt = new StringBuilder();
			_sctipt.AppendLine("/*");
			_sctipt.AppendLine("\tAuto Generated By SampleECS,Don't Modify It Manually!");
			_sctipt.AppendLine("*/");
			_sctipt.AppendLine("namespace SampleECS");
			_sctipt.AppendLine("{");
			_sctipt.AppendLine($"\tpublic class ECS_{context_name}_Context : ECS_Context");
			_sctipt.AppendLine("\t{");

			_sctipt.AppendLine("\t\tpublic ECS_Game_Entity CreateEntity() { return __CreateEntity<ECS_Game_Entity>(); }");
			_sctipt.AppendLine("");

			List<System.Type> context_com = new List<System.Type>();	//static components list
			List<System.Type> entity_com = new List<System.Type>();		//entity components list
			foreach (var type in asm_all_types)
			{
				System.ObsoleteAttribute obs = type.GetCustomAttribute<System.ObsoleteAttribute>();
				if (obs != null)
					continue;
				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();

				if (ca != null)
				{
					if (ca.isStatic)
						context_com.Add(type);
					else
						entity_com.Add(type);
				}
			}

			//Static Components Code
			_sctipt.AppendLine("\t\t/******** Begin Static Components Code ********/");
			foreach (var type in context_com)
			{
				_sctipt.AppendLine($"\t\tpublic {type} static_{type.ToString().ToLower()} = new {type}();");
				_sctipt.AppendLine($"\t\tpublic void Replace_{type}({type} com) " + "{");
				_sctipt.AppendLine($"\t\t\tstatic_{type.ToString().ToLower()} = com;");
				_sctipt.AppendLine($"\t\t\tif (ExcutingSystem) static_dirtyMarkBack[Game_Component_Type.Static_{type}] = FrameCount + 1;");
				_sctipt.AppendLine($"\t\t\telse static_dirtyMarkFront[Game_Component_Type.Static_{type}] = FrameCount;");
				_sctipt.AppendLine("\t\t}");
			}

			_sctipt.AppendLine("\t\tpublic override void InitStaticCom() {");
			_sctipt.AppendLine("\t\t\tstatic_dirtyMarkFront = new uint[Game_Component_Type.STATIC_TYPE_COUNT];");
			_sctipt.AppendLine("\t\t\tstatic_dirtyMarkBack = new uint[Game_Component_Type.STATIC_TYPE_COUNT];");
			_sctipt.AppendLine("\t\t}");
			_sctipt.AppendLine("\t\t/******** End Static Components Code ********/");
			_sctipt.AppendLine("");

			foreach (var type in entity_com)
				_sctipt.AppendLine(string.Format("\t\tpublic ECS_Component_Pool<{0}> pool_{1};", type, type));

			_sctipt.AppendLine("\t\tpublic override void InitComPool(int context_id)");
			_sctipt.AppendLine("\t\t{");
			foreach (var type in entity_com)
			{
				_sctipt.AppendLine("\t\t\tcomponent_pool_container_ptr++;");
				_sctipt.AppendLine(string.Format("\t\t\tpool_{0} = ECS_Component_Pool<{1}>.GetPool(context_id,typeof({2}));", type, type, type));
				_sctipt.AppendLine("\t\t\tECS_Utils.SetArrayElement(ref component_pool_container,component_pool_container_ptr," + string.Format("pool_{0}", type) + ");");
				_sctipt.AppendLine("");
			}
			_sctipt.AppendLine("\t\t}");

			_sctipt.AppendLine("\t}");
			_sctipt.AppendLine("}");

			using (var e_file = File.CreateText(file_path))
			{
				e_file.Write(_sctipt.ToString());
				e_file.Flush();
			}
		}

		//生成Component代码包
		static void Gen_Component_Wrap(string file_path, string context_name, System.Type[] asm_all_types)
		{
			StringBuilder _sctipt = new StringBuilder();
			_sctipt.AppendLine("/*");
			_sctipt.AppendLine("\tAuto Generated By SampleECS,Don't Modify It Manually!");
			_sctipt.AppendLine("*/");
			_sctipt.AppendLine("using System.Collections.Generic;");
			_sctipt.AppendLine("namespace SampleECS");
			_sctipt.AppendLine("{");

			//entity_sctipt.AppendLine("\t\t}");
			_sctipt.AppendLine($"\tpublic static partial class {context_name}_Component_Type");
			_sctipt.AppendLine("\t{");

			List<System.Type> context_com = new List<System.Type>();    //static components list
			List<System.Type> entity_com = new List<System.Type>();     //entity components list
			foreach (var type in asm_all_types)
			{
				System.ObsoleteAttribute obs = type.GetCustomAttribute<System.ObsoleteAttribute>();
				if (obs != null)
					continue;
				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();

				if (ca != null)
				{
					if (ca.isStatic)
						context_com.Add(type);
					else
						entity_com.Add(type);
				}
			}

			_sctipt.AppendLine("\t\t/******** Begin Static Components Code ********/");
			int static_id = 0;
			foreach (var type in context_com)
			{
				_sctipt.AppendLine($"\t\tpublic const int Static_{type} = {static_id};");
				static_id++;
			}
			_sctipt.AppendLine("\t\t/******** End Static Components Code ********/");
			_sctipt.AppendLine("");

			int com_id = 0;
			foreach (var type in entity_com)
			{
				_sctipt.AppendLine(string.Format("\t\t/* Component <{0}> ID */", type));
				_sctipt.AppendLine(string.Format("\t\tpublic const int {0} = {1};", type, com_id));
				com_id++;
			}
			_sctipt.AppendLine("\t}");

			_sctipt.AppendLine("");

			//entity_sctipt.AppendLine("\t\tstatic Dictionary<string,int> COM_TYPE_ID_MAP = new Dictionary<string, int>();");
			_sctipt.AppendLine($"\tpublic static partial class {context_name}_Component_Type");
			_sctipt.AppendLine("\t{");

			_sctipt.AppendLine($"\t\tpublic const int STATIC_TYPE_COUNT = {context_com.Count};");
			_sctipt.AppendLine("");
			_sctipt.AppendLine("\t\tpublic static int COMPONENT_TYPE_COUNT { get; private set; } = 0;");
			_sctipt.AppendLine("\t\tinternal static void SetTypeCount(int count) { COMPONENT_TYPE_COUNT = count; }");
			_sctipt.AppendLine("\t\tstatic Dictionary<string, int> COM_TYPE_ID_MAP = new Dictionary<string, int>();");

			_sctipt.AppendLine("");
			_sctipt.AppendLine("\t\tstatic bool inited = false;");
			_sctipt.AppendLine("\t\tpublic static void Init()");
			_sctipt.AppendLine("\t\t{");
			_sctipt.AppendLine("\t\t\tif(inited) return;");
			foreach (var type in entity_com)
				_sctipt.AppendLine(string.Format("\t\t\tCOM_TYPE_ID_MAP.Add(\"{0}\",{1});", type.ToString(), type));

			_sctipt.AppendLine("\t\t\tSetTypeCount(COM_TYPE_ID_MAP.Count);");
			_sctipt.AppendLine("\t\t\tinited = true;");
			_sctipt.AppendLine("\t\t}");

			_sctipt.AppendLine("\t}");
			_sctipt.AppendLine("}");

			using (var e_file = File.CreateText(file_path))
			{
				e_file.Write(_sctipt.ToString());
				e_file.Flush();
			}
		}

		//生成Entity代码包
		static void Gen_Entity_Wrap(string file_path_root, string context_name, System.Type[] asm_all_types)
		{
			List<List<System.Type>> particial_types = new List<List<System.Type>>();        //分片类型表
			particial_types.Add(new List<System.Type>());
			foreach (var type in asm_all_types)
			{
				System.ObsoleteAttribute obs = type.GetCustomAttribute<System.ObsoleteAttribute>();
				if (obs != null)
					continue;

				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null)
				{
					var cur_tl = particial_types[particial_types.Count - 1];
					if (cur_tl.Count >= 50)
					{
						particial_types.Add(new List<System.Type>());
						cur_tl = particial_types[particial_types.Count - 1];
					}
					cur_tl.Add(type);
				}

				for (int i = 0; i < particial_types.Count; i++)
					Gen_Entity_Wrap_Partial(file_path_root, (i + 1), context_name, particial_types[i]);
			}
		}
		static void Gen_Entity_Wrap_Partial(string file_path, int wrap_idx, string context_name, List<System.Type> asm_all_types)
		{
			file_path = string.Format(file_path, wrap_idx);
			StringBuilder _sctipt = new StringBuilder();
			_sctipt.AppendLine("/*");
			_sctipt.AppendLine("\tAuto Generated By SampleECS,Don't Modify It Manually!");
			_sctipt.AppendLine("*/");
			_sctipt.AppendLine("namespace SampleECS");
			_sctipt.AppendLine("{");
			_sctipt.AppendLine($"\tpublic partial class ECS_{context_name}_Entity : ECS_Entity");
			_sctipt.AppendLine("\t{");
			if (wrap_idx == 1)
			{//首个分片文件
				_sctipt.AppendLine($"\t\tECS_{context_name}_Context context;");
				_sctipt.AppendLine("\t\tpublic override void Reset(uint uid, int contextIdx) {");
				_sctipt.AppendLine("\t\t\tbase.Reset(uid, contextIdx);");
				_sctipt.AppendLine($"\t\t\tcontext = ECS_Context.GetContext(contextIdx) as ECS_{context_name}_Context;");
				_sctipt.AppendLine("\t\t}");
				_sctipt.AppendLine("\t\tconst int INVAILD_IDX = -1;");
			}
			_sctipt.AppendLine("");

			int counter = 1;
			//反射收集全部Component类型
			foreach (var type in asm_all_types)
			{
				System.ObsoleteAttribute obs = type.GetCustomAttribute<System.ObsoleteAttribute>();
				if (obs != null)
					continue;

				ComponentAttribute ca = type.GetCustomAttribute<ComponentAttribute>();
				if (ca != null
					&& !ca.isStatic)
				{
					_sctipt.AppendLine(string.Format("\t\t/************ <{0}>Begin Component Code : " + type + " ************/", counter));
					string com_field = type.ToString().ToLower();
					string pool = "context.pool_" + type;
					string pid = $"poolIndecies[{context_name}_Component_Type." + type + "]";

					//Component引用
					_sctipt.AppendLine("\t\tpublic " + type + " " + com_field +
						"{ get { return " + pool + ".data_pool[" + pid + "-1].user_struct; } "
						+ "set {" + pool + ".data_pool[" + pid + "-1].user_struct = value; }"
						+ "}");

					//Has Component
					_sctipt.AppendLine("\t\tpublic bool has_" + type + " { get { return " + pid + "-1 != INVAILD_IDX; } }");

					//Add Component
					_sctipt.AppendLine(string.Format("\t\tpublic void Add_{0}({1} com)", type, type) +
						" {");
					_sctipt.AppendLine("\t\t\tif(" + pid + "-1 == INVAILD_IDX) {" + pid + " = " + pool + ".NewComponent(com) +1; " +
						"context.OnEntityChange(this); }");
					_sctipt.AppendLine("\t\t\tif (!entityDirty) { entityDirty = true; context.excute_ptr++; context.excuteEntities[context.excute_ptr] = _in_context_idx; }");
					_sctipt.AppendLine("\t\t\tif (context.ExcutingSystem) { com_dirtyMarkBack_Ptr++; com_dirtyMarkBack[com_dirtyMarkBack_Ptr] = "
						+ $"{context_name}_Component_Type." + type + "; }");
					_sctipt.AppendLine("\t\t\telse { com_dirtyMarkFront_Ptr++; com_dirtyMarkFront[com_dirtyMarkFront_Ptr] = "+$"{context_name}_Component_Type." + type + "; }");
					_sctipt.AppendLine("\t\t}");

					//Remove Component
					_sctipt.AppendLine("\t\tpublic void Remove_" + type + "() {");
					_sctipt.AppendLine("\t\t\tif (!has_" + type + ") return;");
					_sctipt.AppendLine("\t\t\t" + pool + ".Recycle(" + pid + "); " + pid + " = 0; context.OnEntityChange(this);");
					_sctipt.AppendLine("\t\t}");

					//Replace Component
					_sctipt.AppendLine(string.Format("\t\tpublic void Replace_{0}({1} com)", type, type));
					_sctipt.AppendLine("\t\t{");
					_sctipt.AppendLine("\t\t\tif (!entityDirty) { entityDirty = true; context.excute_ptr++; context.excuteEntities[context.excute_ptr] = _in_context_idx; }");
					_sctipt.AppendLine("\t\t\t" + com_field + " = com;");
					_sctipt.AppendLine("\t\t\tif (context.ExcutingSystem) { com_dirtyMarkBack_Ptr++; com_dirtyMarkBack[com_dirtyMarkBack_Ptr] = "
						+ $"{context_name}_Component_Type." + type + "; }");
					_sctipt.AppendLine("\t\t\telse { com_dirtyMarkFront_Ptr++; com_dirtyMarkFront[com_dirtyMarkFront_Ptr] = " + $"{context_name}_Component_Type." + type + "; }");

					_sctipt.AppendLine("\t\t}");
					_sctipt.AppendLine(string.Format("\t\t/************ <{0}>End Component Code : " + type + " ************/", counter));
					_sctipt.AppendLine("");
					counter++;
				}
			}
			_sctipt.AppendLine("\t}");
			_sctipt.AppendLine("}");

			using (var e_file = File.CreateText(file_path))
			{
				e_file.Write(_sctipt.ToString());
				e_file.Flush();
			}
		}

		//生成System代码包
		static void Gen_System_Wrap(string file_path, string context_name)
		{
			StringBuilder _sctipt = new StringBuilder();
			_sctipt.AppendLine("/*");
			_sctipt.AppendLine("\tAuto Generated By SampleECS,Don't Modify It Manually!");
			_sctipt.AppendLine("*/");
			_sctipt.AppendLine("namespace SampleECS");
			_sctipt.AppendLine("{");

			_sctipt.AppendLine("\t/// <summary>");
			_sctipt.AppendLine($"\t/// System In \"{context_name}\" Context");
			_sctipt.AppendLine("\t/// </summary>");
			_sctipt.AppendLine($"\tpublic class ECS_{context_name}_System : ECS_System");
			_sctipt.AppendLine("\t{");

			_sctipt.AppendLine("\t\tprotected ECS_Game_Context context { get { return __context as ECS_Game_Context; } }");
			_sctipt.AppendLine("");

			_sctipt.AppendLine("\t\tpublic override bool __GetSystemMatch(ECS_Entity entity) {");
			_sctipt.AppendLine($"\t\t\treturn GetSystemMatch(entity as ECS_{context_name}_Entity);");
			_sctipt.AppendLine("\t\t}");
			_sctipt.AppendLine($"\t\tpublic virtual bool GetSystemMatch(ECS_{context_name}_Entity entity)" + " { return true; }");
			_sctipt.AppendLine("");

			_sctipt.AppendLine("\t\tprotected override void __OnSystemInited(ECS_Context context) {");
			_sctipt.AppendLine("\t\t\tbase.__OnSystemInited(context);");
			_sctipt.AppendLine($"\t\t\tOnSystemInited(context as ECS_{context_name}_Context);");
			_sctipt.AppendLine("\t\t}");
			_sctipt.AppendLine($"\t\tprotected virtual void OnSystemInited(ECS_{context_name}_Context context) " + "{ }");
			_sctipt.AppendLine("");

			_sctipt.AppendLine("\t\tpublic override void __Excute(ECS_Entity entity) {");
			_sctipt.AppendLine("\t\t\tbase.__Excute(entity);");
			_sctipt.AppendLine($"\t\t\tExcute(entity as ECS_{context_name}_Entity);");
			_sctipt.AppendLine("\t\t}");
			_sctipt.AppendLine($"\t\tpublic virtual void Excute(ECS_{context_name}_Entity entity)" + " { }");
			_sctipt.AppendLine("");

			_sctipt.AppendLine("\t}");

			_sctipt.AppendLine("");
			_sctipt.AppendLine("\t/// <summary>");
			_sctipt.AppendLine($"\t/// Static System In \"{context_name}\" Context");
			_sctipt.AppendLine("\t/// </summary>");
			_sctipt.AppendLine($"\tpublic class ECS_{context_name}_Static_System : ECS_Static_System");
			_sctipt.AppendLine("\t{");
			_sctipt.AppendLine("\t\tpublic override void __ExcuteStatic(ECS_Context context)");
			_sctipt.AppendLine("\t\t{");
			_sctipt.AppendLine("\t\t\tbase.__ExcuteStatic(context);");
			_sctipt.AppendLine($"\t\t\tExcuteStatic(context as ECS_{context_name}_Context);");
			_sctipt.AppendLine("\t\t}");
			_sctipt.AppendLine($"\t\tpublic virtual void ExcuteStatic(ECS_{context_name}_Context context) " + "{ }");
			_sctipt.AppendLine("\t}");

			_sctipt.AppendLine("}");
			using (var e_file = File.CreateText(file_path))
			{
				e_file.Write(_sctipt.ToString());
				e_file.Flush();
			}
		}

		[MenuItem("公共框架/Sample ECS/全部清理")]
		public static void CleanCodes()
		{
			string gen_path = EcsEditorTool.GetEditorPath + "/GenCodes";
			if (Directory.Exists(gen_path))
				Directory.Delete(gen_path, true);

			AssetDatabase.Refresh();
		}
	}
}