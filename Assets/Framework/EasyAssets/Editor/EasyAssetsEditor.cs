using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using System.IO;
using EasyAsset.EditorCoroutines;
using System;

namespace EasyAsset
{
    public static class Definer
    {
        static bool inited = false;

        static string editorPath;
        static string editorGUIPath;

        //public static Texture textureScene, texturePrefab, textureAsset, texturePicture;
        public static Texture textureOther;


        static Dictionary<AssetData.AssetType, Texture> assetIcons = new Dictionary<AssetData.AssetType, Texture>();
        public static Texture GetAssetTexture(AssetData.AssetType assetType)
        {
            if (assetIcons.ContainsKey(assetType))
                return assetIcons[assetType];
            return textureOther;
        }

        //public static void Inided()
        //{
        //    //if (inited)
        //        //return;

        //    inited = true;

        //    DirectoryInfo rootDir = new DirectoryInfo(Application.dataPath);
        //    FileInfo[] files = rootDir.GetFiles("EasyAssetsEditor.cs", SearchOption.AllDirectories);
        //    editorPath = Path.GetDirectoryName(files[0].FullName.Replace("\\", "/").Replace(Application.dataPath, "Assets"));
        //    editorGUIPath = editorPath + "/GUI";

        //    textureOther = AssetDatabase.LoadAssetAtPath<Texture2D>(editorGUIPath + "/icon-other.png");

        //    assetIcons.Clear();
        //    assetIcons.Add(AssetData.AssetType.Material, AssetDatabase.LoadAssetAtPath<Texture2D>(editorGUIPath + "/icon-mat.png"));
        //    //assetIcons.Add(AssetData.AssetType.Other, AssetDatabase.LoadAssetAtPath<Texture2D>(editorGUIPath + "/icon-mat.png"));

        //}
    }

    public class EasyAssets : EditorWindow
    {
        static EasyAssets instance;
        [MenuItem("Tools/Easy Assets/Open Window")]
        public static void OpenWindow()
        {
            GetInstance();
            instance.Show();
            instance.Focus();
        }

        public static EasyAssets GetInstance()
        {
            if (instance == null)
            {
                instance = CreateWindow<EasyAssets>();
                instance.Init();
            }

            return instance;
        }

        public void Init()
        {
            minSize = new Vector2(480, 200);
            title = "Easy Assets";
        }

        public BuildTarget curTarget = BuildTarget.NoTarget;
        public string buildPath = "";
        bool copyToPersistentPath = false;

        private void OnGUI()
        {
            GUILayout.Space(10);
            if (GUILayout.Button("资源分析器"))
            {
                AssetAnalysis.OpenWindow();
            }

            GUILayout.Space(15);
            curTarget = (BuildTarget)EditorGUILayout.EnumPopup("目标平台: ", curTarget);
            GUILayout.Space(5);
            GUILayout.BeginHorizontal();
            GUILayout.Label("输出路径: ");
            GUILayout.TextField(buildPath, GUILayout.MinWidth(200));
            GUILayout.Space(10);
            copyToPersistentPath = GUILayout.Toggle(copyToPersistentPath, "是否输出本地");
            GUILayout.Space(20);
            if (GUILayout.Button("选择输出路径"))
            {
                buildPath = EditorUtility.OpenFolderPanel("AssetBundle OutputPath", Application.dataPath, "");
            }

            GUILayout.EndHorizontal();

            if (!string.IsNullOrEmpty(buildPath)
                && curTarget != BuildTarget.NoTarget
                && GUILayout.Button("构建AssetBundle"))
            {
                BuildBundle();
                GenAssetList();

                if (copyToPersistentPath)
                    CopyToPersistentPath();

                System.Diagnostics.Process.Start(buildPath);
            }
        }

        void BuildBundle()
        {
            //清空上次结果
            string[] files = Directory.GetFiles(buildPath, "*.*", SearchOption.AllDirectories);
            foreach (var f in files)
            {
                File.Delete(f);
            }

            //打包AssetBundle
            BuildPipeline.BuildAssetBundles(buildPath, BuildAssetBundleOptions.UncompressedAssetBundle, curTarget);
        }

        void GenAssetList()
        {
            //生成资源清单
            var formatPath = buildPath.Replace("\\", "/");
            var split_path = formatPath.Split('/');
            var manifestName = split_path[split_path.Length - 1];
            var manifestBundle = AssetBundle.LoadFromFile(buildPath + "/" + manifestName);

            try
            {
                using (var sw = File.CreateText(buildPath + "/assetlist"))
                {
                    sw.WriteLine("/* Auto Generated By EasyAsset */");
                    AssetBundleManifest manifest = manifestBundle.LoadAsset<AssetBundleManifest>("assetbundlemanifest");
                    //Debug.Log(asset[0] + "," + asset.Length);
                    Debug.Log(manifest.name);

                    sw.WriteLine("manifest:" + manifestName);
                    string[] allBundles = manifest.GetAllAssetBundles();
                    foreach (var bundle_name in allBundles)
                    {
                        Debug.Log("load bundle: " + bundle_name);
                        var bundle = AssetBundle.LoadFromFile(buildPath + "/" + bundle_name);
                        string[] bundleAssets = bundle.GetAllAssetNames();
                        foreach (var asset in bundleAssets)
                        {
                            Debug.Log(bundle.name + " => " + asset);
                            sw.WriteLine(asset + ":" + bundle.name);
                        }

                        bundle.Unload(true);
                        bundle = null;
                    }

                    sw.Flush();
                    sw.Close();
                }
            }
            catch (Exception ex)
            {
                Debug.Log(ex.Message + "\n" + ex.StackTrace);
            }

            manifestBundle.Unload(true);
            manifestBundle = null;
        }

        void CopyToPersistentPath()
        {
            PathHelper.Init();

            if (!Directory.Exists(PathHelper.EXTERNAL_ASSET_PATH))
                Directory.CreateDirectory(PathHelper.EXTERNAL_ASSET_PATH);

            string[] files = Directory.GetFiles(buildPath, "*.*", SearchOption.AllDirectories);
            foreach (var f in files)
            {
                var fName = Path.GetFileName(f);
                File.Copy(f, PathHelper.EXTERNAL_ASSET_PATH + fName);
            }
        }
    }

    /// <summary>
    /// 资源分析器
    /// </summary>
    public class AssetAnalysis : EditorWindow
    {
        public static AssetAnalysis instance { get; private set; }
        public static void OpenWindow()
        {
            //Definer.Inided();
            GetInstance();
            instance.Show();
            instance.Focus();
        }

        public static AssetAnalysis GetInstance()
        {
            if (instance == null)
            {
                instance = CreateWindow<AssetAnalysis>();
                instance.Init();
            }

            return instance;
        }

        public void Init()
        {
            minSize = new Vector2(850, 800);
            title = "资源分析器";

            forwardAnalysis = new ForwardAnalysis();
            backAnalysis = new BackAnalysis();
        }

        string analysisPath;

        //正向分析器
        ForwardAnalysis forwardAnalysis;
        //反向分析器
        BackAnalysis backAnalysis;

        public enum AnalysisType
        {
            正向分析,
            反向分析,
        }

        AnalysisType analysisType = AnalysisType.正向分析;

        private void OnGUI()
        {
            GUILayout.Space(5);

            //GUILayout.BeginVertical();

            EditorGUILayout.TextField("资源分析路径: ", analysisPath);

            GUILayout.BeginHorizontal();

            analysisType = (AnalysisType)EditorGUILayout.EnumPopup("分析类型: ", analysisType);

            BaseAnalysis curAnalysis = backAnalysis;
            if (analysisType == AnalysisType.正向分析)
                curAnalysis = forwardAnalysis;

            GUILayout.Space(20);

            if (GUILayout.Button("选择资源分析路径"))
            {
                analysisPath = EditorUtility.OpenFolderPanel("分析路径", Application.dataPath, "");
                curAnalysis.Clear();
                return;
            }
            GUILayout.EndHorizontal();

            //GUILayout.EndVertical();

            if (!string.IsNullOrEmpty(analysisPath))
            {
                GUILayout.Space(10);

                GUILayout.BeginHorizontal();
                curAnalysis.filter = EditorGUILayout.TextField("过滤器:", curAnalysis.filter);
                GUILayout.Space(30);
                if (GUILayout.Button("分析"))
                {
                    curAnalysis.Clear();
                    curAnalysis.analysisPath = analysisPath;
                    curAnalysis.curAssetPath = "";
                    curAnalysis.Analysis(Directory.GetFiles(analysisPath, "*.*", SearchOption.AllDirectories));
                }
                GUILayout.EndHorizontal();

                GUILayout.Space(5);
                GUILayout.BeginHorizontal();
                GUILayout.EndHorizontal();

                if (curAnalysis.inAnalysing)
                {
                    GUILayout.Space(10);
                    GUILayout.BeginHorizontal();
                    GUILayout.Space(15);
                    Rect rect = GUILayoutUtility.GetRect(position.width - 100, 15);
                    EditorGUI.ProgressBar(rect, curAnalysis.analysingProgress, "正在分析中: ");
                    GUILayout.Space(15);
                    GUILayout.EndHorizontal();
                    Repaint();
                }

                curAnalysis.onGUI();
            }
        }
    }

    /// <summary>
    /// 资源数据
    /// </summary>
    public class AssetData
    {
        public enum AssetType
        {
            Scene,
            Prefab,
            Material,
            Shader,
            Audio,
            Sprite,
            Texture,
            Other,
        }
        public string assetPath = "";
        public AssetType assetType { get; private set; }
        public Texture cachedIcon
        {
            get
            {
                return AssetDatabase.GetCachedIcon(assetPath);
            }
        }

        public bool dirty { get; private set; } = false;

        string _assetBundleName;
        public string assetBundleName
        {
            get
            {
                return _assetBundleName;
            }
            set
            {
                if (_assetBundleName == value)
                    return;
                _assetBundleName = value;
                CheckDirty();
            }
        }

        string _assetBundleVariant;
        public string assetBundleVariant
        {
            get
            {
                return _assetBundleVariant;
            }
            set
            {
                if (_assetBundleVariant == value)
                    return;

                _assetBundleVariant = value;
                CheckDirty();
            }
        }

        void CheckDirty()
        {
            var ai = AssetImporter.GetAtPath(assetPath);

            dirty = !Equals(ai.assetBundleName, assetBundleName) || !Equals(ai.assetBundleVariant, assetBundleVariant);
        }

        bool Equals(string s1, string s2)
        {
            if (string.IsNullOrEmpty(s1)
                && string.IsNullOrEmpty(s2))
                return true;

            return s1 == s2;
        }

        public static AssetType Path2AssetType(string path)
        {
            string ex = Path.GetExtension(path);
            switch (ex)
            {
                case ".png":
                    return AssetType.Texture;
                case ".mat":
                    return AssetType.Material;
            }

            return AssetType.Other;
        }

        public void ApplyAssetBundleName()
        {
            var ai = AssetImporter.GetAtPath(assetPath);
            ai.assetBundleName = assetBundleName == "" ? null : assetBundleName;
            if (!string.IsNullOrEmpty(ai.assetBundleName))
                ai.assetBundleVariant = assetBundleVariant == "" ? null : assetBundleVariant;

            dirty = false;
        }

        public AssetData(string path)
        {
            assetPath = path;
            assetType = Path2AssetType(path);
            var ai = AssetImporter.GetAtPath(assetPath);
            if (ai != null)
            {
                assetBundleName = ai.assetBundleName;
                assetBundleVariant = ai.assetBundleVariant;
            }
            else
                Debug.LogError("无法导入的资源类型，路径为: " + assetPath);
        }
    }

    /// <summary>
    /// 分析数据
    /// </summary>
    public class AnalysisData
    {
        public AssetData assetData;

        Dictionary<string, int> applies = new Dictionary<string, int>();            //反向依赖
        Dictionary<string, int> dependencies = new Dictionary<string, int>();       //正向依赖

        public Dictionary<string, int> GetApplies()
        {
            return applies;
        }

        public Dictionary<string, int> GetDependencies()
        {
            return dependencies;
        }

        public int AppliesCount { get { return applies.Count; } }

        public void AddApplyCount(string assetPath)
        {
            if (assetPath == assetData.assetPath)
                return;
            //Debug.Log("add apply " + assetPath);
            if (!applies.ContainsKey(assetPath))
                applies.Add(assetPath, 1);
            else
                applies[assetPath] += 1;
        }

        public int DependencyCount { get { return dependencies.Count; } }
        public void AddDependencyCount(string assetPath)
        {
            if (assetPath == assetData.assetPath)
                return;

            if (!dependencies.ContainsKey(assetPath))
                dependencies.Add(assetPath, 1);
            else
                dependencies[assetPath] += 1;
        }

        public AnalysisData(AssetData assetData)
        {
            this.assetData = assetData;
        }
    }
}